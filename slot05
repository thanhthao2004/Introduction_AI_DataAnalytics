-----------------------
import pandas as pd

df = pd.DataFrame({'Math': [4, 4, 7, 8, 12, 13, 15, 18, 22, 23, 23, 25],
                   'Eng': [2, 5, 4, 7, 7, 8, 5, 4, 5, 11, 13, 8]})
df.shape

df['bin1'] = pd.qcut(df['Math'], q=5)
df

df['bin1'].value_counts()

df['bin2'] = pd.qcut(df['Math'], q=[0, .2, .4, .6, .8, 1])
df

df['bin3'] = pd.qcut(df['Math'],
                           q=[0, .2, .4, .6, .8, 1],
                           labels=['A', 'B', 'C', 'D', 'E'])
df

df['bin4'] = pd.cut(df['Eng'],
                      bins=[0, 5, 8, float('Inf')],
                      labels=['Bad', 'OK', 'Good'])
df

df['bin4'].value_counts()

---------------------------------------

import pandas as pd

gdp = [11, 22, 33, 44, 55, 66, 77]
countries = ['Spain', 'France', 'Spain', 'Germany', 'France']
df = pd.DataFrame(list(zip(gdp, countries)),
                  columns=['GDP', 'Countries'])
df

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
df['labelCountries']= label_encoder.fit_transform(df['Countries']) 
df

dfOneHotEncoding = pd.get_dummies(df.Countries, prefix='Country')
print(dfOneHotEncoding.head())

df = pd.concat([df, dfOneHotEncoding], axis=1)
df

from sklearn.preprocessing import LabelBinarizer
y = LabelBinarizer().fit_transform(df.Countries)
y

from sklearn.preprocessing import OneHotEncoder
y = OneHotEncoder().fit_transform(df[['Countries']]).toarray()
print(y)

---------------------------------------
import pandas as pd

year = [2010,2011,2012,2013,2014,2015]

salaryHCM = [8.5,9.0,10.5,12.0,11.0,10.0]

salaryLA = [5.5,6.0,6.0,5.5,6.0,5.0]

df = pd.DataFrame(list(zip(year, salaryHCM,salaryLA)),
                  columns=['Year', 'HCM','LA'])
df

max_la = df['LA'].abs().max()
df['macLA'] = df['LA'] / max_la

df

from sklearn.preprocessing import MaxAbsScaler
scaler = MaxAbsScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)

vSc = scaler.transform([[4.5,5.75]])
vSc

vR = scaler.inverse_transform([[0.5,0.8]])
vR

min_la = df['LA'].min()
max_la = df['LA'].max()
df['mmcLA'] = (df['LA'] - min_la) / (max_la - min_la)

df

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)

-----------------------------

mean_la = df['LA'].mean()
std_la = df['LA'].std()
df['zLA'] = (df['LA'] - mean_la) / std_la

df

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])

scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)

-------------------------------
def funcX(x):
    return x*x + 1

df['TransformX'] = funcX(df[["LA"]])

df
